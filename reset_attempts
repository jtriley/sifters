#!/bin/bash
#
# Use edx-platform command added for proctor xmodule to
# reset attempts made by students for a given course

VENV_PATH="$1"
EDX_PATH="$2"
COURSE_ID="$3"

progname=$(basename $0) 

usage()
{
	cat <<EOF >&2
Usage: reset_attempts [options] [output_csv]

Use edx-platform command reset_attempts to reset the attempts
of students for a course

Options:
 --help print this help message
 -n, --dry-run show what the script would do

EOF
}

SHORTOPTS="n"
LONGOPTS="help,dry-run"

if $(getopt -T >/dev/null 2>&1) ; [ $? = 4 ] ; then # New longopts getopt.
 OPTS=$(getopt -o $SHORTOPTS --long $LONGOPTS -n "$progname" -- "$@")
else # Old classic getopt.
 # Special handling for --help on old getopt.
 case $1 in --help) usage ; exit 0 ;; esac
 OPTS=$(getopt $SHORTOPTS "$@")
fi

eval set -- "$OPTS"
dryrun=false
while [ $# -gt 0 ]; do
	: debug: $1
	case $1 in
		--help)
			usage
			exit -1
			;;
		-n|--dry-run)
			dryrun=true
			shift
			;;
		--)
			shift
			break
			;;
		*)
			echo "Internal Error: option processing error: $1" 1>&2
			exit 1
			;;
	esac
done

OUTPUT_CSV="$4"

options=""
if $dryrun; then
	options="--dry-run"
fi

if [[ "$OUTPUT_CSV" == "" ]]; then
	OUTPUT_CSV="reset_attempts_report_$(date +"%Y-%m-%dT%H:%M").csv"
fi

echo "Setting report file name to $OUTPUT_CSV" >&2

tmpcsv=$(mktemp)
cd $EDX_PATH
cmd="$VENV_PATH/bin/python manage.py lms --settings=aws reset_attempts $options --csv-output-filename $tmpcsv $COURSE_ID > /dev/null"
eval $cmd
if [ $? -ne 0 ]; then
	echo "Ran command: $cmd" >&2
	echo "reset_attempts command failed" >&2
	exit -2
fi

# Run sifter specific output to name file and spit output into stdout
# stream for storage.
echo "$OUTPUT_CSV"
cat $tmpcsv
rm $tmpcsv
